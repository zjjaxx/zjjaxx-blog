{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post.jpg","path":"img/post.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tag.jpg","path":"img/tag.jpg","modified":0,"renderable":1},{"_id":"source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"011c69c60b9f21ead71f65effa46ff810241fe2c","modified":1631806168864},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1631717456367},{"_id":"themes/butterfly/package.json","hash":"c18b118422237b964063874a099945b79573feca","modified":1631717456392},{"_id":"themes/butterfly/_config.yml","hash":"3779e5bd82e15ea9cd2bf662ebdb5ef6d32f43dc","modified":1631806303966},{"_id":"themes/butterfly/README.md","hash":"cedd13fcd8c75a68742265dd8eced4087e940ffd","modified":1631717456367},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1631717456368},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1631717456368},{"_id":"themes/butterfly/README_CN.md","hash":"459d6f3200863021bee1fe72a719aef236fb4090","modified":1631717456367},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1631717456368},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1631717456366},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1631717456368},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1631717456369},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1631717456391},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1631717456369},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1631717456365},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1631717456391},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1631717456392},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1631717456392},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1631717456366},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1631717456366},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1631717456366},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1631717456369},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"d69ee5b407e8ffec236844fcd92e5bfa98494986","modified":1631721054010},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1631717456370},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1631717456373},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1631717456375},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1631717456369},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1631717456392},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1631717456393},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1631717456376},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1631717456393},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1631717456393},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1631717456394},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1631717456394},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1631717456376},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1631717456394},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1631717456394},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":1631717456395},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1631717456395},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1631717456396},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1631717456397},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1631717456395},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1631717456397},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1631717456398},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1631717456398},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1631717456393},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1631717456398},{"_id":"themes/butterfly/source/css/var.styl","hash":"40c3f64422205a24e68ce1ad8fe8163f24fdd525","modified":1631717456410},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1631717456411},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1631717456410},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1631717456410},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1631717456411},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1631717456412},{"_id":"themes/butterfly/source/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1631717456412},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1631717456372},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1631717456419},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1631717456372},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1631717456417},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1631717456372},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1631717456372},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1631717456373},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1631717456370},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1631717456370},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1631717456370},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1631717456370},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1631717456371},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1631717456371},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1631717456371},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1631717456371},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1631717456373},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1631717456371},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1631717456373},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1631717456374},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1631717456374},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1631717456374},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1631717456374},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"b53a2d4f9c37b375a4446d2273dcfb7712d91b3e","modified":1631717456375},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1631717456375},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1631717456375},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1631717456375},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1631717456376},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1631717456384},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1631717456386},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1631717456386},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1631717456389},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1631717456387},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1631717456389},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1631717456389},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1631717456389},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1631717456389},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1631717456390},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1631717456390},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1631717456390},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1631717456390},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1631717456390},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1631717456391},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1631717456390},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1631717456391},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1631717456391},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"eda47f3e807a466ba8275627ea936c5100c43818","modified":1631717456399},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1631717456399},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7feb755ca7c22da36bbad11e74ecd95fdcf3b879","modified":1631717456402},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1631717456402},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1631717456402},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"dd8cdf639ba2b726437c77fa7aa8d5edbabe8f9b","modified":1631717456403},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"98235fcda3b87ad6f7e91eafbed94d0d6ae847ca","modified":1631717456403},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1631717456403},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1631717456403},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1631717456404},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1631717456404},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1631717456404},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1631717456404},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1631717456405},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1631717456405},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1631717456400},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1631717456401},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1631717456405},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1631717456406},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1631717456406},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1631717456405},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1631717456406},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1631717456406},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"97fec1e814f88237862f4d800a35362b802f6625","modified":1631717456406},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"7c4152162a03aa8331a783df5695e4ebbb816a8c","modified":1631717456407},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1631717456408},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1631717456408},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1631717456408},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1631717456408},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1631717456407},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1631717456408},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1631717456409},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1631717456409},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1631717456407},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1631717456407},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1631717456407},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1631717456410},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1631717456415},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1631717456415},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1631717456377},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1631717456377},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1631717456377},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1631717456377},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1631717456378},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1631717456378},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1631717456409},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1631717456377},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1631717456378},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1631717456379},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1631717456380},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1631717456381},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1631717456381},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1631717456381},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1631717456382},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1631717456382},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1631717456382},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1631717456382},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1631717456383},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1631717456383},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1631717456383},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1631717456379},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1631717456379},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1631717456384},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"36f3c603d2a2ecddaa6d2675a89d76ad94968f72","modified":1631717456383},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1631717456384},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1631717456384},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1631717456385},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1631717456385},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1631717456385},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1631717456386},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1631717456386},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1631717456387},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1631717456387},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1631717456388},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1631717456388},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1631717456384},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1631717456385},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1631717456387},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1631717456388},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1631717456400},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1631717456388},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1631717456401},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1631717456400},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1631717456401},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1631717456401},{"_id":"themes/butterfly/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1631718094623},{"_id":"public/2021/09/15/hello-world/index.html","hash":"a149da0d2cb2d6716ce6a6a28dca3effcf178847","modified":1631718370099},{"_id":"public/index.html","hash":"9a941e2fd898002912befa8646da695b5dfedaf6","modified":1631718370099},{"_id":"public/archives/index.html","hash":"119180e8e5d18bec9e2818c02d4a4f9aa14ff55d","modified":1631718370099},{"_id":"public/archives/2021/index.html","hash":"ccfb793c6337505ca525854977acd4e26c2c3d4f","modified":1631718370099},{"_id":"public/archives/2021/09/index.html","hash":"c7f8cc7cb6a9d3d0c8e2002b80c43e3fca9e6559","modified":1631718370099},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1631718370099},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1631718370099},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1631718370099},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1631718370099},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631718370099},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1631718370099},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1631718370099},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1631718370099},{"_id":"public/css/index.css","hash":"4e5d9ead0952d31f549bbc22765a615a4540f58b","modified":1631718370099},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1631718370099},{"_id":"public/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1631718370099},{"_id":"themes/butterfly/source/img/avatar.jpeg","hash":"7ab42c52d198fbcf36c378e295caf9036a8fe2c8","modified":1631801099882},{"_id":"themes/butterfly/source/img/home-bg.jpg","hash":"fbbaf6c1cb192a339e895d378a58e5265e5334d2","modified":1631801374318},{"_id":"source/_posts/interview_js.md","hash":"ac066ee9e756ac40d85d58ce5f2faf610f63773b","modified":1631807854973},{"_id":"themes/butterfly/source/img/post.jpg","hash":"1e13c06408b611db2456067894fed98283ec57bb","modified":1631802626538},{"_id":"themes/butterfly/source/img/tag.jpg","hash":"7231275ad53e4d3918b770624a12ee13084c1555","modified":1631803477761},{"_id":"source/_posts/interview_node.md","hash":"04fe95e3e2155bdabcdb95c471ab1bdb82af754e","modified":1631803999522},{"_id":"source/img/avatar.jpeg","hash":"7ab42c52d198fbcf36c378e295caf9036a8fe2c8","modified":1631807841380}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-09-15T14:49:16.788Z","updated":"2021-09-16T15:29:28.864Z","_id":"cktlmhbls0000x5bq17n6adoy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"/img/tag.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"JavaScript","top_img":"../img/avatar.jpeg","cover":"../img/avatar.jpeg","_content":"# JavaScript\n\n## 数组的展平方式\n方式一：\n```\nary.flat(Infinity)\n```\n方式二，递归：\n```\nfunction flatter(arr){\nreturn [].concat(…arr.map(x =>\nArray.isArray(x)? flatter(x) : x\n))\n}\n```\n\n方式三，reduce：\n```\n(function flatten(arr) {\n    return arr.reduce((prev,next) => {\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    },[])\n})(arr)\n```\n## Promise\n- 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）\n- Promise 新建后就会立即执行。\n- 注意，调用resolve或reject并不会终结 Promise 的参数函数的执行。\n- Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。\n- catch()方法返回的还是一个 Promise 对象，因此后面还可以接着调用then()方法。\n### 为什么Promise可以链式调用\nthen方法返回的是一个新的Promise实例,因此可以采用链式写法，即then方法后面再调用另一个then方法。\n### finally\n```\nPromise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n```\n\n### Promise.all\nPromise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\nPromise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。\n### Promise.all Promise.race实现\n### 手写实现Promise\n## 常见的状态码\n- 200：这个是最常见的http状态码，表示服务器已经成功接受请求，\n- 301：重定向\n- 304：缓存\n- 400：参数有误\n- 401：未认证\n- 403: 权限不够 \n- 404：请求失败，客户端请求的资源没有找到或者是不存在\n- 500：服务器遇到未知的错误，导致无法完成客户端当前的请求。\n- 503: 服务器超负载\n\n## 如果新建一个对象\n### 字面量形式\n不足:创建具有相同接口的多个对象需要重复编写很多代码\n### 工厂模式\n不足:没有解决对象标识问题，新建的对象是什么类型的\n### 构造函数模式\n不足:其定义的方法会在每个实例上都创建一遍\n#### new一个对象做了什么\n1. 在内存中创建一个新对象\n2. 把构造函数的原型赋值给新对象\n3. 修改构造函数的this指向为新的对象\n4. 执行构造函数\n5. 如果构造函数返回非空对象,则返回该对象,否则返回刚创建的新对象\n\n### 原型模式\n每个函数都会创建一个prototype属性，包含该实例对象的共享属性和方法\n#### instanceof有什么用\ninstanceof检查实例的原型链中是否包含指定的构造函数\n#### 如果确定实例和构造函数之间的关系\n- __proto__\n```\nperson.__proto__==Person.prototype\n```\n- isPrototypeOf\n```\nPerson.prototype.isPrototypeOf(person) //true\n```\n- Object.getPrototypeOf()\n```\nObject.getPrototypeOf(person)==Person.prototype//true\n```\n#### hasOwnProperty方法可以用于判断该属性是否来自于原型\n\n## 继承\n### 组合继承\n1. 盗用构造函数\n2. 新建父类的实例作为子类的原型\n\n不足:父类构造函数要调用2次\n### 原型式继承 （Object.create）\n1. 函数内新声明一个构造函数\n2. 设置构造函数的原型为传入的对象\n3. 用该构造函数新建一个实例返回\n### 寄生式继承\n原型式继承的工厂模式\n### 寄生式组合继承\n1. 盗用父类构造函数\n2. 用寄生式继承实现子类原型设置\n\n","source":"_posts/interview_js.md","raw":"---\ntitle: JavaScript\ntags: javascript\ntop_img: ../img/avatar.jpeg\ncover: ../img/avatar.jpeg\n---\n# JavaScript\n\n## 数组的展平方式\n方式一：\n```\nary.flat(Infinity)\n```\n方式二，递归：\n```\nfunction flatter(arr){\nreturn [].concat(…arr.map(x =>\nArray.isArray(x)? flatter(x) : x\n))\n}\n```\n\n方式三，reduce：\n```\n(function flatten(arr) {\n    return arr.reduce((prev,next) => {\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    },[])\n})(arr)\n```\n## Promise\n- 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）\n- Promise 新建后就会立即执行。\n- 注意，调用resolve或reject并不会终结 Promise 的参数函数的执行。\n- Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。\n- catch()方法返回的还是一个 Promise 对象，因此后面还可以接着调用then()方法。\n### 为什么Promise可以链式调用\nthen方法返回的是一个新的Promise实例,因此可以采用链式写法，即then方法后面再调用另一个then方法。\n### finally\n```\nPromise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n```\n\n### Promise.all\nPromise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\nPromise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。\n### Promise.all Promise.race实现\n### 手写实现Promise\n## 常见的状态码\n- 200：这个是最常见的http状态码，表示服务器已经成功接受请求，\n- 301：重定向\n- 304：缓存\n- 400：参数有误\n- 401：未认证\n- 403: 权限不够 \n- 404：请求失败，客户端请求的资源没有找到或者是不存在\n- 500：服务器遇到未知的错误，导致无法完成客户端当前的请求。\n- 503: 服务器超负载\n\n## 如果新建一个对象\n### 字面量形式\n不足:创建具有相同接口的多个对象需要重复编写很多代码\n### 工厂模式\n不足:没有解决对象标识问题，新建的对象是什么类型的\n### 构造函数模式\n不足:其定义的方法会在每个实例上都创建一遍\n#### new一个对象做了什么\n1. 在内存中创建一个新对象\n2. 把构造函数的原型赋值给新对象\n3. 修改构造函数的this指向为新的对象\n4. 执行构造函数\n5. 如果构造函数返回非空对象,则返回该对象,否则返回刚创建的新对象\n\n### 原型模式\n每个函数都会创建一个prototype属性，包含该实例对象的共享属性和方法\n#### instanceof有什么用\ninstanceof检查实例的原型链中是否包含指定的构造函数\n#### 如果确定实例和构造函数之间的关系\n- __proto__\n```\nperson.__proto__==Person.prototype\n```\n- isPrototypeOf\n```\nPerson.prototype.isPrototypeOf(person) //true\n```\n- Object.getPrototypeOf()\n```\nObject.getPrototypeOf(person)==Person.prototype//true\n```\n#### hasOwnProperty方法可以用于判断该属性是否来自于原型\n\n## 继承\n### 组合继承\n1. 盗用构造函数\n2. 新建父类的实例作为子类的原型\n\n不足:父类构造函数要调用2次\n### 原型式继承 （Object.create）\n1. 函数内新声明一个构造函数\n2. 设置构造函数的原型为传入的对象\n3. 用该构造函数新建一个实例返回\n### 寄生式继承\n原型式继承的工厂模式\n### 寄生式组合继承\n1. 盗用父类构造函数\n2. 用寄生式继承实现子类原型设置\n\n","slug":"interview_js","published":1,"date":"2021-09-16T14:37:41.769Z","updated":"2021-09-16T16:00:33.093Z","_id":"cktn1et1u0000xybqg58s1eas","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"数组的展平方式\"><a href=\"#数组的展平方式\" class=\"headerlink\" title=\"数组的展平方式\"></a>数组的展平方式</h2><p>方式一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary.flat(Infinity)</span><br></pre></td></tr></table></figure>\n<p>方式二，递归：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function flatter(arr)&#123;</span><br><span class=\"line\">return [].concat(…arr.map(x =&gt;</span><br><span class=\"line\">Array.isArray(x)? flatter(x) : x</span><br><span class=\"line\">))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式三，reduce：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function flatten(arr) &#123;</span><br><span class=\"line\">    return arr.reduce((prev,next) =&gt; &#123;</span><br><span class=\"line\">        return prev.concat(Array.isArray(next) ? flatten(next) : next)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">&#125;)(arr)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ul>\n<li>有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）</li>\n<li>Promise 新建后就会立即执行。</li>\n<li>注意，调用resolve或reject并不会终结 Promise 的参数函数的执行。</li>\n<li>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。</li>\n<li>catch()方法返回的还是一个 Promise 对象，因此后面还可以接着调用then()方法。<h3 id=\"为什么Promise可以链式调用\"><a href=\"#为什么Promise可以链式调用\" class=\"headerlink\" title=\"为什么Promise可以链式调用\"></a>为什么Promise可以链式调用</h3>then方法返回的是一个新的Promise实例,因此可以采用链式写法，即then方法后面再调用另一个then方法。<h3 id=\"finally\"><a href=\"#finally\" class=\"headerlink\" title=\"finally\"></a>finally</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.prototype.finally = function (callback) &#123;</span><br><span class=\"line\">  let P = this.constructor;</span><br><span class=\"line\">  return this.then(</span><br><span class=\"line\">    value  =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class=\"line\">    reason =&gt; P.resolve(callback()).then(() =&gt; &#123; throw reason &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<p>Promise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p>\n<h3 id=\"Promise-all-Promise-race实现\"><a href=\"#Promise-all-Promise-race实现\" class=\"headerlink\" title=\"Promise.all Promise.race实现\"></a>Promise.all Promise.race实现</h3><h3 id=\"手写实现Promise\"><a href=\"#手写实现Promise\" class=\"headerlink\" title=\"手写实现Promise\"></a>手写实现Promise</h3><h2 id=\"常见的状态码\"><a href=\"#常见的状态码\" class=\"headerlink\" title=\"常见的状态码\"></a>常见的状态码</h2><ul>\n<li>200：这个是最常见的http状态码，表示服务器已经成功接受请求，</li>\n<li>301：重定向</li>\n<li>304：缓存</li>\n<li>400：参数有误</li>\n<li>401：未认证</li>\n<li>403: 权限不够 </li>\n<li>404：请求失败，客户端请求的资源没有找到或者是不存在</li>\n<li>500：服务器遇到未知的错误，导致无法完成客户端当前的请求。</li>\n<li>503: 服务器超负载</li>\n</ul>\n<h2 id=\"如果新建一个对象\"><a href=\"#如果新建一个对象\" class=\"headerlink\" title=\"如果新建一个对象\"></a>如果新建一个对象</h2><h3 id=\"字面量形式\"><a href=\"#字面量形式\" class=\"headerlink\" title=\"字面量形式\"></a>字面量形式</h3><p>不足:创建具有相同接口的多个对象需要重复编写很多代码</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>不足:没有解决对象标识问题，新建的对象是什么类型的</p>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>不足:其定义的方法会在每个实例上都创建一遍</p>\n<h4 id=\"new一个对象做了什么\"><a href=\"#new一个对象做了什么\" class=\"headerlink\" title=\"new一个对象做了什么\"></a>new一个对象做了什么</h4><ol>\n<li>在内存中创建一个新对象</li>\n<li>把构造函数的原型赋值给新对象</li>\n<li>修改构造函数的this指向为新的对象</li>\n<li>执行构造函数</li>\n<li>如果构造函数返回非空对象,则返回该对象,否则返回刚创建的新对象</li>\n</ol>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>每个函数都会创建一个prototype属性，包含该实例对象的共享属性和方法</p>\n<h4 id=\"instanceof有什么用\"><a href=\"#instanceof有什么用\" class=\"headerlink\" title=\"instanceof有什么用\"></a>instanceof有什么用</h4><p>instanceof检查实例的原型链中是否包含指定的构造函数</p>\n<h4 id=\"如果确定实例和构造函数之间的关系\"><a href=\"#如果确定实例和构造函数之间的关系\" class=\"headerlink\" title=\"如果确定实例和构造函数之间的关系\"></a>如果确定实例和构造函数之间的关系</h4><ul>\n<li><strong>proto</strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.__proto__==Person.prototype</span><br></pre></td></tr></table></figure></li>\n<li>isPrototypeOf<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person) //true</span><br></pre></td></tr></table></figure></li>\n<li>Object.getPrototypeOf()<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.getPrototypeOf(person)==Person.prototype//true</span><br></pre></td></tr></table></figure>\n<h4 id=\"hasOwnProperty方法可以用于判断该属性是否来自于原型\"><a href=\"#hasOwnProperty方法可以用于判断该属性是否来自于原型\" class=\"headerlink\" title=\"hasOwnProperty方法可以用于判断该属性是否来自于原型\"></a>hasOwnProperty方法可以用于判断该属性是否来自于原型</h4></li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><ol>\n<li>盗用构造函数</li>\n<li>新建父类的实例作为子类的原型</li>\n</ol>\n<p>不足:父类构造函数要调用2次</p>\n<h3 id=\"原型式继承-（Object-create）\"><a href=\"#原型式继承-（Object-create）\" class=\"headerlink\" title=\"原型式继承 （Object.create）\"></a>原型式继承 （Object.create）</h3><ol>\n<li>函数内新声明一个构造函数</li>\n<li>设置构造函数的原型为传入的对象</li>\n<li>用该构造函数新建一个实例返回<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3>原型式继承的工厂模式<h3 id=\"寄生式组合继承\"><a href=\"#寄生式组合继承\" class=\"headerlink\" title=\"寄生式组合继承\"></a>寄生式组合继承</h3></li>\n<li>盗用父类构造函数</li>\n<li>用寄生式继承实现子类原型设置</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"数组的展平方式\"><a href=\"#数组的展平方式\" class=\"headerlink\" title=\"数组的展平方式\"></a>数组的展平方式</h2><p>方式一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary.flat(Infinity)</span><br></pre></td></tr></table></figure>\n<p>方式二，递归：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function flatter(arr)&#123;</span><br><span class=\"line\">return [].concat(…arr.map(x =&gt;</span><br><span class=\"line\">Array.isArray(x)? flatter(x) : x</span><br><span class=\"line\">))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方式三，reduce：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function flatten(arr) &#123;</span><br><span class=\"line\">    return arr.reduce((prev,next) =&gt; &#123;</span><br><span class=\"line\">        return prev.concat(Array.isArray(next) ? flatten(next) : next)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">&#125;)(arr)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ul>\n<li>有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）</li>\n<li>Promise 新建后就会立即执行。</li>\n<li>注意，调用resolve或reject并不会终结 Promise 的参数函数的执行。</li>\n<li>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。</li>\n<li>catch()方法返回的还是一个 Promise 对象，因此后面还可以接着调用then()方法。<h3 id=\"为什么Promise可以链式调用\"><a href=\"#为什么Promise可以链式调用\" class=\"headerlink\" title=\"为什么Promise可以链式调用\"></a>为什么Promise可以链式调用</h3>then方法返回的是一个新的Promise实例,因此可以采用链式写法，即then方法后面再调用另一个then方法。<h3 id=\"finally\"><a href=\"#finally\" class=\"headerlink\" title=\"finally\"></a>finally</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.prototype.finally = function (callback) &#123;</span><br><span class=\"line\">  let P = this.constructor;</span><br><span class=\"line\">  return this.then(</span><br><span class=\"line\">    value  =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class=\"line\">    reason =&gt; P.resolve(callback()).then(() =&gt; &#123; throw reason &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<p>Promise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p>\n<h3 id=\"Promise-all-Promise-race实现\"><a href=\"#Promise-all-Promise-race实现\" class=\"headerlink\" title=\"Promise.all Promise.race实现\"></a>Promise.all Promise.race实现</h3><h3 id=\"手写实现Promise\"><a href=\"#手写实现Promise\" class=\"headerlink\" title=\"手写实现Promise\"></a>手写实现Promise</h3><h2 id=\"常见的状态码\"><a href=\"#常见的状态码\" class=\"headerlink\" title=\"常见的状态码\"></a>常见的状态码</h2><ul>\n<li>200：这个是最常见的http状态码，表示服务器已经成功接受请求，</li>\n<li>301：重定向</li>\n<li>304：缓存</li>\n<li>400：参数有误</li>\n<li>401：未认证</li>\n<li>403: 权限不够 </li>\n<li>404：请求失败，客户端请求的资源没有找到或者是不存在</li>\n<li>500：服务器遇到未知的错误，导致无法完成客户端当前的请求。</li>\n<li>503: 服务器超负载</li>\n</ul>\n<h2 id=\"如果新建一个对象\"><a href=\"#如果新建一个对象\" class=\"headerlink\" title=\"如果新建一个对象\"></a>如果新建一个对象</h2><h3 id=\"字面量形式\"><a href=\"#字面量形式\" class=\"headerlink\" title=\"字面量形式\"></a>字面量形式</h3><p>不足:创建具有相同接口的多个对象需要重复编写很多代码</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>不足:没有解决对象标识问题，新建的对象是什么类型的</p>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>不足:其定义的方法会在每个实例上都创建一遍</p>\n<h4 id=\"new一个对象做了什么\"><a href=\"#new一个对象做了什么\" class=\"headerlink\" title=\"new一个对象做了什么\"></a>new一个对象做了什么</h4><ol>\n<li>在内存中创建一个新对象</li>\n<li>把构造函数的原型赋值给新对象</li>\n<li>修改构造函数的this指向为新的对象</li>\n<li>执行构造函数</li>\n<li>如果构造函数返回非空对象,则返回该对象,否则返回刚创建的新对象</li>\n</ol>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>每个函数都会创建一个prototype属性，包含该实例对象的共享属性和方法</p>\n<h4 id=\"instanceof有什么用\"><a href=\"#instanceof有什么用\" class=\"headerlink\" title=\"instanceof有什么用\"></a>instanceof有什么用</h4><p>instanceof检查实例的原型链中是否包含指定的构造函数</p>\n<h4 id=\"如果确定实例和构造函数之间的关系\"><a href=\"#如果确定实例和构造函数之间的关系\" class=\"headerlink\" title=\"如果确定实例和构造函数之间的关系\"></a>如果确定实例和构造函数之间的关系</h4><ul>\n<li><strong>proto</strong><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.__proto__==Person.prototype</span><br></pre></td></tr></table></figure></li>\n<li>isPrototypeOf<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.prototype.isPrototypeOf(person) //true</span><br></pre></td></tr></table></figure></li>\n<li>Object.getPrototypeOf()<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.getPrototypeOf(person)==Person.prototype//true</span><br></pre></td></tr></table></figure>\n<h4 id=\"hasOwnProperty方法可以用于判断该属性是否来自于原型\"><a href=\"#hasOwnProperty方法可以用于判断该属性是否来自于原型\" class=\"headerlink\" title=\"hasOwnProperty方法可以用于判断该属性是否来自于原型\"></a>hasOwnProperty方法可以用于判断该属性是否来自于原型</h4></li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><ol>\n<li>盗用构造函数</li>\n<li>新建父类的实例作为子类的原型</li>\n</ol>\n<p>不足:父类构造函数要调用2次</p>\n<h3 id=\"原型式继承-（Object-create）\"><a href=\"#原型式继承-（Object-create）\" class=\"headerlink\" title=\"原型式继承 （Object.create）\"></a>原型式继承 （Object.create）</h3><ol>\n<li>函数内新声明一个构造函数</li>\n<li>设置构造函数的原型为传入的对象</li>\n<li>用该构造函数新建一个实例返回<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3>原型式继承的工厂模式<h3 id=\"寄生式组合继承\"><a href=\"#寄生式组合继承\" class=\"headerlink\" title=\"寄生式组合继承\"></a>寄生式组合继承</h3></li>\n<li>盗用父类构造函数</li>\n<li>用寄生式继承实现子类原型设置</li>\n</ol>\n"},{"title":"NODE","_content":"# NODE\n## koa特点\n- 对原生的node api的封装\n- 业务中切面描述需要，在执行某一方法前后做统一的拦截处理，中间件架构\n\n### koa 中间件实现原理\n- 接收多个use的回调函数组成一个数组\n- 将数组中的回调函数组合成一个新函数(函数内部会顺序执行数组中的回调函数,并将自定义的next函数作为参数传入)\n- 在http.createSever的回调函数中执行新函数\n\n\n### koa-router原理（策略模式）\nrouter.get router.post 构成一个映射表 ，获取路径，匹配映射表执行函数\n### koa-static 原理\n读取请求路径是目录还是文件,是目录显示目录列表,是文件显示文件内容\n### Bodyparse原理 \n```\nreq.on(\"data\",fn) req.on(\"end\",fn)\n```\n### 上传文件\n```\nrequest.on(\"data\",data=>{\n    fis.write(data)\n})\nrequest.on(\"end\",data=>{\n    fis.end()\n    response.end()\n})\n```\n\n## 网络\n### 网络分层\n网络层 -> 传输层 -> 应用层\n\n#### IP协议(网络层)\n包含 源 IP 地址、目标 IP 地址等\n#### UDP 协议（传输层）\nUDP 中一个最重要的信息是端口号，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 UDP 就能把指定的数据包发送给指定的程序了,所以IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序。\n#### TCP协议（传输层）\n使用 UDP 来传输会存在两个问题：\n\n1. 数据包在传输过程中容易丢失；\n2. 大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。\n\nTCP协议\n1. 对于数据包丢失的情况，TCP 提供重传机制；\n2. TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。\n\n####  浏览器端发起 HTTP 请求流程\n1. 查找缓存\n2. 浏览器会请求 DNS 返回域名对应的 IP\n3. 建立 TCP 连接\n4. 发送 HTTP 请求\n5. 渲染进程解析HTML内容转化为DOM树结构，解析CSS为CSSDOM\n6. 把DOM和CSSDOM结合生成渲染树\n7. 布局\n8. 绘制\n\n浏览器会解析一部分就渲染绘制一部分\n\ncss会阻塞\"其后的\"DOM树(页面)的渲染，css会阻塞\"其后的\"js执行\n\nDOMContentLoaded(就是当页面的内容解析完成后，则触发该事件)\n- 如果页面中同时存在css和js，并且存在js在css后面，则DOMContentLoaded事件会在css加载完后才执行。\n- 其他情况下，DOMContentLoaded都不会等待css加载，并且DOMContentLoaded事件也不会等待图片、视频等其他资源加载。\n[demo](https://gitee.com/zjjaxx/css-render)\n\n### 常见的http请求方式\n- axios ajax 基于(XMLHttpRequest)的封装\n- jsonp script标签请求,返回并执行执行html中定义的方法,传入其需要的data参数\n- 埋点 \n```\nconst img=new Image()\nimg.src=\"http://localhost:3000/test.png\"\n```\n- fetch\n### 跨域方式\n- jsonp\n- img标签\n- Access-Control-Allow-Origin:http://localhost:3000\n适用于简单请求 get head post content-type为表单、文件、text/plain\n- Access-Control-Allow-(其他配置Headers、PUT) 预检options请求的配置\n除了简单请求外的其他请求：自定义header、put、delete\n- Access-Control-Allow-Credentials  设置允许携带Cookie\n\n### HTTP缓存机制\n#### 作用\n- 提高首屏加载速度,优化用户体验\n- 减少流量消耗\n- 减轻服务器压力\n\n#### 强缓存策略\n##### expires http1.0\n在response header中添加expires表示资源过期时间\n##### cache-control http1.1\n当 expires和cache-control都存在时，cache-control优先级较高,该值为一个时间长度,表示资源过了多久失效,\n- no-cache 需要使用协商缓存来验证缓存数据\n- no-store 所有内容都不会缓存\n- max-age=xxx 多少秒失效 \n#### 协商缓存(需要设置cache-control:no-cache)\n如果设置了no-cache和no-store则本地缓存会被忽略,回去请求服务器验证资源是否更新,如果没更新才继续使用本地缓存,此时返回304，虽然需要后端应答但是后端既不需要生成内容也不需要传输内容\n\n协商缓存主要包括last-modified 和 etag\n\n##### 协商时间\n- last-modified\n- if-modified-since\n\n##### 协商内容 (形式类似)\n- etag\n- if-none-match","source":"_posts/interview_node.md","raw":"---\ntitle: NODE\n---\n# NODE\n## koa特点\n- 对原生的node api的封装\n- 业务中切面描述需要，在执行某一方法前后做统一的拦截处理，中间件架构\n\n### koa 中间件实现原理\n- 接收多个use的回调函数组成一个数组\n- 将数组中的回调函数组合成一个新函数(函数内部会顺序执行数组中的回调函数,并将自定义的next函数作为参数传入)\n- 在http.createSever的回调函数中执行新函数\n\n\n### koa-router原理（策略模式）\nrouter.get router.post 构成一个映射表 ，获取路径，匹配映射表执行函数\n### koa-static 原理\n读取请求路径是目录还是文件,是目录显示目录列表,是文件显示文件内容\n### Bodyparse原理 \n```\nreq.on(\"data\",fn) req.on(\"end\",fn)\n```\n### 上传文件\n```\nrequest.on(\"data\",data=>{\n    fis.write(data)\n})\nrequest.on(\"end\",data=>{\n    fis.end()\n    response.end()\n})\n```\n\n## 网络\n### 网络分层\n网络层 -> 传输层 -> 应用层\n\n#### IP协议(网络层)\n包含 源 IP 地址、目标 IP 地址等\n#### UDP 协议（传输层）\nUDP 中一个最重要的信息是端口号，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 UDP 就能把指定的数据包发送给指定的程序了,所以IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序。\n#### TCP协议（传输层）\n使用 UDP 来传输会存在两个问题：\n\n1. 数据包在传输过程中容易丢失；\n2. 大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。\n\nTCP协议\n1. 对于数据包丢失的情况，TCP 提供重传机制；\n2. TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。\n\n####  浏览器端发起 HTTP 请求流程\n1. 查找缓存\n2. 浏览器会请求 DNS 返回域名对应的 IP\n3. 建立 TCP 连接\n4. 发送 HTTP 请求\n5. 渲染进程解析HTML内容转化为DOM树结构，解析CSS为CSSDOM\n6. 把DOM和CSSDOM结合生成渲染树\n7. 布局\n8. 绘制\n\n浏览器会解析一部分就渲染绘制一部分\n\ncss会阻塞\"其后的\"DOM树(页面)的渲染，css会阻塞\"其后的\"js执行\n\nDOMContentLoaded(就是当页面的内容解析完成后，则触发该事件)\n- 如果页面中同时存在css和js，并且存在js在css后面，则DOMContentLoaded事件会在css加载完后才执行。\n- 其他情况下，DOMContentLoaded都不会等待css加载，并且DOMContentLoaded事件也不会等待图片、视频等其他资源加载。\n[demo](https://gitee.com/zjjaxx/css-render)\n\n### 常见的http请求方式\n- axios ajax 基于(XMLHttpRequest)的封装\n- jsonp script标签请求,返回并执行执行html中定义的方法,传入其需要的data参数\n- 埋点 \n```\nconst img=new Image()\nimg.src=\"http://localhost:3000/test.png\"\n```\n- fetch\n### 跨域方式\n- jsonp\n- img标签\n- Access-Control-Allow-Origin:http://localhost:3000\n适用于简单请求 get head post content-type为表单、文件、text/plain\n- Access-Control-Allow-(其他配置Headers、PUT) 预检options请求的配置\n除了简单请求外的其他请求：自定义header、put、delete\n- Access-Control-Allow-Credentials  设置允许携带Cookie\n\n### HTTP缓存机制\n#### 作用\n- 提高首屏加载速度,优化用户体验\n- 减少流量消耗\n- 减轻服务器压力\n\n#### 强缓存策略\n##### expires http1.0\n在response header中添加expires表示资源过期时间\n##### cache-control http1.1\n当 expires和cache-control都存在时，cache-control优先级较高,该值为一个时间长度,表示资源过了多久失效,\n- no-cache 需要使用协商缓存来验证缓存数据\n- no-store 所有内容都不会缓存\n- max-age=xxx 多少秒失效 \n#### 协商缓存(需要设置cache-control:no-cache)\n如果设置了no-cache和no-store则本地缓存会被忽略,回去请求服务器验证资源是否更新,如果没更新才继续使用本地缓存,此时返回304，虽然需要后端应答但是后端既不需要生成内容也不需要传输内容\n\n协商缓存主要包括last-modified 和 etag\n\n##### 协商时间\n- last-modified\n- if-modified-since\n\n##### 协商内容 (形式类似)\n- etag\n- if-none-match","slug":"interview_node","published":1,"date":"2021-09-16T14:52:54.959Z","updated":"2021-09-16T14:53:19.522Z","_id":"cktn1ydoq0000qcbq6c1o9xrq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"NODE\"><a href=\"#NODE\" class=\"headerlink\" title=\"NODE\"></a>NODE</h1><h2 id=\"koa特点\"><a href=\"#koa特点\" class=\"headerlink\" title=\"koa特点\"></a>koa特点</h2><ul>\n<li>对原生的node api的封装</li>\n<li>业务中切面描述需要，在执行某一方法前后做统一的拦截处理，中间件架构</li>\n</ul>\n<h3 id=\"koa-中间件实现原理\"><a href=\"#koa-中间件实现原理\" class=\"headerlink\" title=\"koa 中间件实现原理\"></a>koa 中间件实现原理</h3><ul>\n<li>接收多个use的回调函数组成一个数组</li>\n<li>将数组中的回调函数组合成一个新函数(函数内部会顺序执行数组中的回调函数,并将自定义的next函数作为参数传入)</li>\n<li>在http.createSever的回调函数中执行新函数</li>\n</ul>\n<h3 id=\"koa-router原理（策略模式）\"><a href=\"#koa-router原理（策略模式）\" class=\"headerlink\" title=\"koa-router原理（策略模式）\"></a>koa-router原理（策略模式）</h3><p>router.get router.post 构成一个映射表 ，获取路径，匹配映射表执行函数</p>\n<h3 id=\"koa-static-原理\"><a href=\"#koa-static-原理\" class=\"headerlink\" title=\"koa-static 原理\"></a>koa-static 原理</h3><p>读取请求路径是目录还是文件,是目录显示目录列表,是文件显示文件内容</p>\n<h3 id=\"Bodyparse原理\"><a href=\"#Bodyparse原理\" class=\"headerlink\" title=\"Bodyparse原理\"></a>Bodyparse原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.on(&quot;data&quot;,fn) req.on(&quot;end&quot;,fn)</span><br></pre></td></tr></table></figure>\n<h3 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.on(&quot;data&quot;,data=&gt;&#123;</span><br><span class=\"line\">    fis.write(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">request.on(&quot;end&quot;,data=&gt;&#123;</span><br><span class=\"line\">    fis.end()</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"网络分层\"><a href=\"#网络分层\" class=\"headerlink\" title=\"网络分层\"></a>网络分层</h3><p>网络层 -&gt; 传输层 -&gt; 应用层</p>\n<h4 id=\"IP协议-网络层\"><a href=\"#IP协议-网络层\" class=\"headerlink\" title=\"IP协议(网络层)\"></a>IP协议(网络层)</h4><p>包含 源 IP 地址、目标 IP 地址等</p>\n<h4 id=\"UDP-协议（传输层）\"><a href=\"#UDP-协议（传输层）\" class=\"headerlink\" title=\"UDP 协议（传输层）\"></a>UDP 协议（传输层）</h4><p>UDP 中一个最重要的信息是端口号，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 UDP 就能把指定的数据包发送给指定的程序了,所以IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序。</p>\n<h4 id=\"TCP协议（传输层）\"><a href=\"#TCP协议（传输层）\" class=\"headerlink\" title=\"TCP协议（传输层）\"></a>TCP协议（传输层）</h4><p>使用 UDP 来传输会存在两个问题：</p>\n<ol>\n<li>数据包在传输过程中容易丢失；</li>\n<li>大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。</li>\n</ol>\n<p>TCP协议</p>\n<ol>\n<li>对于数据包丢失的情况，TCP 提供重传机制；</li>\n<li>TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。</li>\n</ol>\n<h4 id=\"浏览器端发起-HTTP-请求流程\"><a href=\"#浏览器端发起-HTTP-请求流程\" class=\"headerlink\" title=\"浏览器端发起 HTTP 请求流程\"></a>浏览器端发起 HTTP 请求流程</h4><ol>\n<li>查找缓存</li>\n<li>浏览器会请求 DNS 返回域名对应的 IP</li>\n<li>建立 TCP 连接</li>\n<li>发送 HTTP 请求</li>\n<li>渲染进程解析HTML内容转化为DOM树结构，解析CSS为CSSDOM</li>\n<li>把DOM和CSSDOM结合生成渲染树</li>\n<li>布局</li>\n<li>绘制</li>\n</ol>\n<p>浏览器会解析一部分就渲染绘制一部分</p>\n<p>css会阻塞”其后的”DOM树(页面)的渲染，css会阻塞”其后的”js执行</p>\n<p>DOMContentLoaded(就是当页面的内容解析完成后，则触发该事件)</p>\n<ul>\n<li>如果页面中同时存在css和js，并且存在js在css后面，则DOMContentLoaded事件会在css加载完后才执行。</li>\n<li>其他情况下，DOMContentLoaded都不会等待css加载，并且DOMContentLoaded事件也不会等待图片、视频等其他资源加载。<br><a href=\"https://gitee.com/zjjaxx/css-render\">demo</a></li>\n</ul>\n<h3 id=\"常见的http请求方式\"><a href=\"#常见的http请求方式\" class=\"headerlink\" title=\"常见的http请求方式\"></a>常见的http请求方式</h3><ul>\n<li>axios ajax 基于(XMLHttpRequest)的封装</li>\n<li>jsonp script标签请求,返回并执行执行html中定义的方法,传入其需要的data参数</li>\n<li>埋点 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const img=new Image()</span><br><span class=\"line\">img.src=&quot;http://localhost:3000/test.png&quot;</span><br></pre></td></tr></table></figure></li>\n<li>fetch<h3 id=\"跨域方式\"><a href=\"#跨域方式\" class=\"headerlink\" title=\"跨域方式\"></a>跨域方式</h3></li>\n<li>jsonp</li>\n<li>img标签</li>\n<li>Access-Control-Allow-Origin:<a href=\"http://localhost:3000/\">http://localhost:3000</a><br>适用于简单请求 get head post content-type为表单、文件、text/plain</li>\n<li>Access-Control-Allow-(其他配置Headers、PUT) 预检options请求的配置<br>除了简单请求外的其他请求：自定义header、put、delete</li>\n<li>Access-Control-Allow-Credentials  设置允许携带Cookie</li>\n</ul>\n<h3 id=\"HTTP缓存机制\"><a href=\"#HTTP缓存机制\" class=\"headerlink\" title=\"HTTP缓存机制\"></a>HTTP缓存机制</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>提高首屏加载速度,优化用户体验</li>\n<li>减少流量消耗</li>\n<li>减轻服务器压力</li>\n</ul>\n<h4 id=\"强缓存策略\"><a href=\"#强缓存策略\" class=\"headerlink\" title=\"强缓存策略\"></a>强缓存策略</h4><h5 id=\"expires-http1-0\"><a href=\"#expires-http1-0\" class=\"headerlink\" title=\"expires http1.0\"></a>expires http1.0</h5><p>在response header中添加expires表示资源过期时间</p>\n<h5 id=\"cache-control-http1-1\"><a href=\"#cache-control-http1-1\" class=\"headerlink\" title=\"cache-control http1.1\"></a>cache-control http1.1</h5><p>当 expires和cache-control都存在时，cache-control优先级较高,该值为一个时间长度,表示资源过了多久失效,</p>\n<ul>\n<li>no-cache 需要使用协商缓存来验证缓存数据</li>\n<li>no-store 所有内容都不会缓存</li>\n<li>max-age=xxx 多少秒失效 <h4 id=\"协商缓存-需要设置cache-control-no-cache\"><a href=\"#协商缓存-需要设置cache-control-no-cache\" class=\"headerlink\" title=\"协商缓存(需要设置cache-control:no-cache)\"></a>协商缓存(需要设置cache-control:no-cache)</h4>如果设置了no-cache和no-store则本地缓存会被忽略,回去请求服务器验证资源是否更新,如果没更新才继续使用本地缓存,此时返回304，虽然需要后端应答但是后端既不需要生成内容也不需要传输内容</li>\n</ul>\n<p>协商缓存主要包括last-modified 和 etag</p>\n<h5 id=\"协商时间\"><a href=\"#协商时间\" class=\"headerlink\" title=\"协商时间\"></a>协商时间</h5><ul>\n<li>last-modified</li>\n<li>if-modified-since</li>\n</ul>\n<h5 id=\"协商内容-形式类似\"><a href=\"#协商内容-形式类似\" class=\"headerlink\" title=\"协商内容 (形式类似)\"></a>协商内容 (形式类似)</h5><ul>\n<li>etag</li>\n<li>if-none-match</li>\n</ul>\n","site":{"data":{}},"cover":"/img/tag.jpg","excerpt":"","more":"<h1 id=\"NODE\"><a href=\"#NODE\" class=\"headerlink\" title=\"NODE\"></a>NODE</h1><h2 id=\"koa特点\"><a href=\"#koa特点\" class=\"headerlink\" title=\"koa特点\"></a>koa特点</h2><ul>\n<li>对原生的node api的封装</li>\n<li>业务中切面描述需要，在执行某一方法前后做统一的拦截处理，中间件架构</li>\n</ul>\n<h3 id=\"koa-中间件实现原理\"><a href=\"#koa-中间件实现原理\" class=\"headerlink\" title=\"koa 中间件实现原理\"></a>koa 中间件实现原理</h3><ul>\n<li>接收多个use的回调函数组成一个数组</li>\n<li>将数组中的回调函数组合成一个新函数(函数内部会顺序执行数组中的回调函数,并将自定义的next函数作为参数传入)</li>\n<li>在http.createSever的回调函数中执行新函数</li>\n</ul>\n<h3 id=\"koa-router原理（策略模式）\"><a href=\"#koa-router原理（策略模式）\" class=\"headerlink\" title=\"koa-router原理（策略模式）\"></a>koa-router原理（策略模式）</h3><p>router.get router.post 构成一个映射表 ，获取路径，匹配映射表执行函数</p>\n<h3 id=\"koa-static-原理\"><a href=\"#koa-static-原理\" class=\"headerlink\" title=\"koa-static 原理\"></a>koa-static 原理</h3><p>读取请求路径是目录还是文件,是目录显示目录列表,是文件显示文件内容</p>\n<h3 id=\"Bodyparse原理\"><a href=\"#Bodyparse原理\" class=\"headerlink\" title=\"Bodyparse原理\"></a>Bodyparse原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.on(&quot;data&quot;,fn) req.on(&quot;end&quot;,fn)</span><br></pre></td></tr></table></figure>\n<h3 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.on(&quot;data&quot;,data=&gt;&#123;</span><br><span class=\"line\">    fis.write(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">request.on(&quot;end&quot;,data=&gt;&#123;</span><br><span class=\"line\">    fis.end()</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"网络分层\"><a href=\"#网络分层\" class=\"headerlink\" title=\"网络分层\"></a>网络分层</h3><p>网络层 -&gt; 传输层 -&gt; 应用层</p>\n<h4 id=\"IP协议-网络层\"><a href=\"#IP协议-网络层\" class=\"headerlink\" title=\"IP协议(网络层)\"></a>IP协议(网络层)</h4><p>包含 源 IP 地址、目标 IP 地址等</p>\n<h4 id=\"UDP-协议（传输层）\"><a href=\"#UDP-协议（传输层）\" class=\"headerlink\" title=\"UDP 协议（传输层）\"></a>UDP 协议（传输层）</h4><p>UDP 中一个最重要的信息是端口号，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 UDP 就能把指定的数据包发送给指定的程序了,所以IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序。</p>\n<h4 id=\"TCP协议（传输层）\"><a href=\"#TCP协议（传输层）\" class=\"headerlink\" title=\"TCP协议（传输层）\"></a>TCP协议（传输层）</h4><p>使用 UDP 来传输会存在两个问题：</p>\n<ol>\n<li>数据包在传输过程中容易丢失；</li>\n<li>大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。</li>\n</ol>\n<p>TCP协议</p>\n<ol>\n<li>对于数据包丢失的情况，TCP 提供重传机制；</li>\n<li>TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。</li>\n</ol>\n<h4 id=\"浏览器端发起-HTTP-请求流程\"><a href=\"#浏览器端发起-HTTP-请求流程\" class=\"headerlink\" title=\"浏览器端发起 HTTP 请求流程\"></a>浏览器端发起 HTTP 请求流程</h4><ol>\n<li>查找缓存</li>\n<li>浏览器会请求 DNS 返回域名对应的 IP</li>\n<li>建立 TCP 连接</li>\n<li>发送 HTTP 请求</li>\n<li>渲染进程解析HTML内容转化为DOM树结构，解析CSS为CSSDOM</li>\n<li>把DOM和CSSDOM结合生成渲染树</li>\n<li>布局</li>\n<li>绘制</li>\n</ol>\n<p>浏览器会解析一部分就渲染绘制一部分</p>\n<p>css会阻塞”其后的”DOM树(页面)的渲染，css会阻塞”其后的”js执行</p>\n<p>DOMContentLoaded(就是当页面的内容解析完成后，则触发该事件)</p>\n<ul>\n<li>如果页面中同时存在css和js，并且存在js在css后面，则DOMContentLoaded事件会在css加载完后才执行。</li>\n<li>其他情况下，DOMContentLoaded都不会等待css加载，并且DOMContentLoaded事件也不会等待图片、视频等其他资源加载。<br><a href=\"https://gitee.com/zjjaxx/css-render\">demo</a></li>\n</ul>\n<h3 id=\"常见的http请求方式\"><a href=\"#常见的http请求方式\" class=\"headerlink\" title=\"常见的http请求方式\"></a>常见的http请求方式</h3><ul>\n<li>axios ajax 基于(XMLHttpRequest)的封装</li>\n<li>jsonp script标签请求,返回并执行执行html中定义的方法,传入其需要的data参数</li>\n<li>埋点 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const img=new Image()</span><br><span class=\"line\">img.src=&quot;http://localhost:3000/test.png&quot;</span><br></pre></td></tr></table></figure></li>\n<li>fetch<h3 id=\"跨域方式\"><a href=\"#跨域方式\" class=\"headerlink\" title=\"跨域方式\"></a>跨域方式</h3></li>\n<li>jsonp</li>\n<li>img标签</li>\n<li>Access-Control-Allow-Origin:<a href=\"http://localhost:3000/\">http://localhost:3000</a><br>适用于简单请求 get head post content-type为表单、文件、text/plain</li>\n<li>Access-Control-Allow-(其他配置Headers、PUT) 预检options请求的配置<br>除了简单请求外的其他请求：自定义header、put、delete</li>\n<li>Access-Control-Allow-Credentials  设置允许携带Cookie</li>\n</ul>\n<h3 id=\"HTTP缓存机制\"><a href=\"#HTTP缓存机制\" class=\"headerlink\" title=\"HTTP缓存机制\"></a>HTTP缓存机制</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>提高首屏加载速度,优化用户体验</li>\n<li>减少流量消耗</li>\n<li>减轻服务器压力</li>\n</ul>\n<h4 id=\"强缓存策略\"><a href=\"#强缓存策略\" class=\"headerlink\" title=\"强缓存策略\"></a>强缓存策略</h4><h5 id=\"expires-http1-0\"><a href=\"#expires-http1-0\" class=\"headerlink\" title=\"expires http1.0\"></a>expires http1.0</h5><p>在response header中添加expires表示资源过期时间</p>\n<h5 id=\"cache-control-http1-1\"><a href=\"#cache-control-http1-1\" class=\"headerlink\" title=\"cache-control http1.1\"></a>cache-control http1.1</h5><p>当 expires和cache-control都存在时，cache-control优先级较高,该值为一个时间长度,表示资源过了多久失效,</p>\n<ul>\n<li>no-cache 需要使用协商缓存来验证缓存数据</li>\n<li>no-store 所有内容都不会缓存</li>\n<li>max-age=xxx 多少秒失效 <h4 id=\"协商缓存-需要设置cache-control-no-cache\"><a href=\"#协商缓存-需要设置cache-control-no-cache\" class=\"headerlink\" title=\"协商缓存(需要设置cache-control:no-cache)\"></a>协商缓存(需要设置cache-control:no-cache)</h4>如果设置了no-cache和no-store则本地缓存会被忽略,回去请求服务器验证资源是否更新,如果没更新才继续使用本地缓存,此时返回304，虽然需要后端应答但是后端既不需要生成内容也不需要传输内容</li>\n</ul>\n<p>协商缓存主要包括last-modified 和 etag</p>\n<h5 id=\"协商时间\"><a href=\"#协商时间\" class=\"headerlink\" title=\"协商时间\"></a>协商时间</h5><ul>\n<li>last-modified</li>\n<li>if-modified-since</li>\n</ul>\n<h5 id=\"协商内容-形式类似\"><a href=\"#协商内容-形式类似\" class=\"headerlink\" title=\"协商内容 (形式类似)\"></a>协商内容 (形式类似)</h5><ul>\n<li>etag</li>\n<li>if-none-match</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cktn1et1u0000xybqg58s1eas","tag_id":"cktn2zqba0000x8bqamm28os7","_id":"cktn2zqbe0001x8bqgnfr7n2d"},{"post_id":"cktlmhbls0000x5bq17n6adoy","tag_id":"cktn39ehd0000ifbq6e005ijt","_id":"cktn39ehl0001ifbq7nn90zsj"}],"Tag":[{"name":"javascript","_id":"cktn2zqba0000x8bqamm28os7"},{"name":"test","_id":"cktn39ehd0000ifbq6e005ijt"}]}}